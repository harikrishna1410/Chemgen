//This implementation uses rocblas to compute the reaction rates.
//loosely based on Barwey, Shivam, and Venkat Raman. Energies 14, no. 9 (2021): 2710.
//coef matrices are of size NREACTS_MECH*NSP_SK unlike the other versions
//In this version, I don't transform the coef matrices

/******************************************************************************/
//NOTE: in this version the coefficients and maps are all of size NREACT_MECH*NSP_SK
//whereas for the other versions its NREACT_MECH*MAX_SP2
/******************************************************************************/

// RR = KF * pi(C) - KF * pi(EG) * pfac**coef_sum * pi1(C) = KF(pi(C) - pi1(C) * pi(EG) *pfac )
//method 1: =KF( exp(sigma(logc) - exp(sigma(logc) + sigma(logEG) + log(pfac)) )
//method 2: =exp(logKF + sigma(logC)) - exp(logKF + sigma(logEG) + sigma(logC) + log(pfac))
//Here, sigma is a matrix multiply.
//This version uses method 1 mainly because KF and pfac are directly computed in place during wdot computations
//the above expressions are not exactly correct. for example sigma(EG) is actually -logEQK from below
//I just wrote it here to justify method 1 over 2


#include "getrates_device_functions.h"
#include "getrates_hip_v4.h"

//#define LDS
//#define NO_TRANSPOSE
//#define FUSE_EG_C
#define USE_TROE
#define USE_THREE_BODY
//*********************************************************************************************
//*********************************************************************************************
//*********************************************************************************************
//function computes the equilibrium constant without multiplying the pfac
//assumes all of the inputs are already on device
//this is non-blocking
static rocblas_status calc_eqk_no_pfac_kernel(
    int ng, 
    int nreact,
    rocblas_handle *handle,
    double* logEG, 
    double* sk_coef_d,
    double* logEQK){
 
    rocblas_status stat = rocblas_status_success;

    rocblas_int m   = ng;
    rocblas_int k   = NSP_SK;
    rocblas_int n =  nreact;
    
    double alpha = -1.0;
    double beta  = 0.0;

    // //this sets where the scalar values are stored
    stat = rocblas_set_pointer_mode(*handle, rocblas_pointer_mode_host);
    CHECK_ROCBLAS_STATUS(stat);

    // Perform the matrix multiplication
    //this is non-blocking
    stat = rocblas_dgemm(
                    *handle,
                    rocblas_operation_none,
                    rocblas_operation_none,
                    m,
                    n,
                    k,
                    &alpha,
                    logEG,
                    m,
                    sk_coef_d,
                    k,
                    &beta,
                    logEQK,
                    m);

    CHECK_ROCBLAS_STATUS(stat);

    return stat;
}
//*********************************************************************************************
//*********************************************************************************************
//*********************************************************************************************
//this function only computes the sigma_logC part of forward and backward rate computation 
static rocblas_status calc_sigma_logC_kernel(
    int ng,
    int nreact,
    rocblas_handle *handle,
    double* logC, 
    double* coef, 
    double* sigma_logC) {
    
    rocblas_status stat = rocblas_status_success;

    rocblas_int m   = ng;
    rocblas_int k   = NSP_RED;
    rocblas_int n =  nreact;
    
    double alpha = 1.0;
    double beta  = 0.0;
    
    //this sets where the scalar values are stored
    stat = rocblas_set_pointer_mode(*handle, rocblas_pointer_mode_host);
    CHECK_ROCBLAS_STATUS(stat);
    
    // Perform the matrix multiplication
    //this is non-blocking
    stat = rocblas_dgemm(
                    *handle,
                    rocblas_operation_none,
                    rocblas_operation_none,
                    m,
                    n,
                    k,
                    &alpha,
                    logC,
                    m,
                    coef,
                    k,
                    &beta,
                    sigma_logC,
                    m);
    CHECK_ROCBLAS_STATUS(stat);

    return stat;
}

//*********************************************************************************************
//*********************************************************************************************
//*********************************************************************************************
//This function computes the net rate of progress
static __global__ void calc_net_rate_kernel(
    int ng, 
    double* Temp,
    double* logEQK,
    double* sigma_logC_p,
    double* sigma_logC_r, 
    double* sk_coef_d,
    double* A_d,
    double* B_d,
    double* rr) {

    int idx_g, rnum, idx_l, rnum_g, my_idx;
    int L;
    double KF, logPFAC, ST_COEF_SUM;

    idx_l = threadIdx.x;
    idx_g = blockIdx.x * VECLEN + idx_l;
    rnum = threadIdx.y;
    rnum_g = blockIdx.y * NREACT_PER_BLOCK + rnum;

    my_idx = rnum_g*ng + idx_g;

    ST_COEF_SUM = 0;
    for(L=0;L<NSP_SK;L++){
        ST_COEF_SUM = ST_COEF_SUM + sk_coef_d[rnum_g*NSP_SK + L];
    }
    logPFAC  = -log(PATM / (RU * Temp[idx_g]))*ST_COEF_SUM;
    KF = exp(log(Temp[idx_g])*B_d[rnum_g*2] + B_d[rnum_g*2 + 1]/Temp[idx_g] + A_d[rnum_g]);

    rr[my_idx] = KF*(exp(sigma_logC_r[my_idx]) - exp(sigma_logC_p[my_idx] + logEQK[my_idx] + logPFAC));

}
//*********************************************************************************************
//*********************************************************************************************
//*********************************************************************************************
//This function computes the net rate of progress for the third body reactions
static __global__ void calc_net_rate_kernel_three_body(
    int ng, 
    double* Temp,
    double* logC,
    double* logEQK,
    double* sigma_logC_p,
    double* sigma_logC_r, 
    double* sk_coef_d,
    double* A_d,
    double* B_d,
    double* eff_fac_d,
    double* rr) {

    int idx_g, rnum, idx_l, rnum_g, my_idx;
    int L;
    double M=0.0;
    double KF, logPFAC, ST_COEF_SUM;

    idx_l = threadIdx.x;
    idx_g = blockIdx.x * VECLEN + idx_l;
    rnum = threadIdx.y;
    rnum_g = blockIdx.y * NREACT_PER_BLOCK + rnum;

    my_idx = rnum_g*ng + idx_g;

    ST_COEF_SUM = 0;
    for(L=0;L<NSP_SK;L++){
        ST_COEF_SUM = ST_COEF_SUM + sk_coef_d[rnum_g*NSP_SK + L];
    }
    logPFAC  = -log(PATM / (RU * Temp[idx_g]))*ST_COEF_SUM;
    
    for(L=0; L<NSP_RED; L++) {
        M += exp(logC[L*ng + idx_g]) * eff_fac_d[rnum_g*NSP_RED + L];
    }

    KF = M*exp(log(Temp[idx_g])*B_d[rnum_g*2] + B_d[rnum_g*2 + 1]/Temp[idx_g] + A_d[rnum_g]);

    rr[my_idx] = KF*(exp(sigma_logC_r[my_idx]) - exp(sigma_logC_p[my_idx] + logEQK[my_idx] + logPFAC));

}
//*********************************************************************************************
//*********************************************************************************************
//*********************************************************************************************
//This function computes the net rate of progress for the falloff-TROE reactions
static __global__ void calc_net_rate_kernel_troe(
    int ng, 
    double* Temp,
    double* logC,
    double* logEQK,
    double* sigma_logC_p,
    double* sigma_logC_r, 
    double* sk_coef_d,
    double* A_0_d,
    double* B_0_d,
    double* A_inf_d,
    double* B_inf_d,
    double* eff_fac_d,
    double* fcent_coef_d,
    double* rr) {

    int idx_g, rnum, idx_l, rnum_g, my_idx;
    int L;
    double logKF, logPFAC, ST_COEF_SUM;
    double log10_fcent, log10_pr, log10_f, M=0.0;
    int idx_sp, idx_sp2;
    int rnum6,rnum2;
    double T;
    const double LOG10=log(10);

    idx_l = threadIdx.x;
    idx_g = blockIdx.x * VECLEN + idx_l;
    rnum = threadIdx.y;
    rnum_g = blockIdx.y * NREACT_PER_BLOCK + rnum;
    my_idx = rnum_g*ng + idx_g;

    rnum6 = rnum_g*6;
    rnum2 = rnum_g*2;
    T = Temp[idx_g];

    // Compute log_fcent first since we need it multiple times
    log10_fcent = log10(fcent_coef_d[rnum6]*exp(-T/fcent_coef_d[rnum6 + 1]) + 
                    fcent_coef_d[rnum6 + 2]*exp(-T/fcent_coef_d[rnum6 + 3]) + 
                    fcent_coef_d[rnum6 + 4]*exp(-fcent_coef_d[rnum6 + 5]/T));
    
    // Compute log_kf and reuse rnum*2 calculation
    logKF = log(T)*B_inf_d[rnum2] + B_inf_d[rnum2 + 1]/T + A_inf_d[rnum_g];
    
    // Compute log_pr, reusing log_kf from ALOG_RF[0]
    log10_pr = log(T)*B_0_d[rnum2] + B_0_d[rnum2 + 1]/T + A_0_d[rnum_g] - logKF;
    
    // Accumulate third body effects
    //this is quite expensive. However, registers are low
    //This was like this assuming that number of Fall-off reactions
    //will be small.
    for(int L=0; L<NSP_RED; L++) {
        M += exp(logC[L*ng + idx_g]) * eff_fac_d[rnum_g*NSP_RED + L];
    }
    log10_pr += log(M);
    log10_pr /= LOG10;

    // Compute F-center factor
    log10_f = (-0.67*log10_fcent + log10_pr - 0.4) / (-1.1762*log10_fcent - 0.14*log10_pr + 0.806);
    log10_f = log10_fcent/(1.0 + log10_f*log10_f);
    
    // Update forward rate
    logKF += LOG10*(log10_pr + log10_f) - log1p(exp(LOG10*log10_pr));

    ST_COEF_SUM = 0;
    for(L=0;L<NSP_SK;L++){
        ST_COEF_SUM = ST_COEF_SUM + sk_coef_d[rnum_g*NSP_SK + L];
    }
    logPFAC  = -log(PATM / (RU * Temp[idx_g]))*ST_COEF_SUM;

    rr[my_idx] = exp(sigma_logC_r[my_idx] + logKF) - exp(sigma_logC_p[my_idx] + logEQK[my_idx] + logPFAC + logKF);

}
//*********************************************************************************************
//*********************************************************************************************
//*********************************************************************************************

//this kernel computes the 
static rocblas_status calc_wdot_kernel(
    int ng,
    int nreact,
    rocblas_handle *handle, 
    double* rr,
    double* wdot_coef_d,
    double* wdot) {
    
    rocblas_status stat = rocblas_status_success;

    rocblas_int m   =  ng;
    rocblas_int n   =  NSP_RED;
    rocblas_int k   =  nreact;
    
    double alpha = 1.0;
    double beta  = 0.0;
    
    //this sets where the scalar values are stored
    stat = rocblas_set_pointer_mode(*handle, rocblas_pointer_mode_host);
    CHECK_ROCBLAS_STATUS(stat);
    
    // Perform the matrix multiplication
    //this is non-blocking
    stat = rocblas_dgemm(
                    *handle,
                    rocblas_operation_none,
                    rocblas_operation_none,
                    m,
                    n,
                    k,
                    &alpha,
                    rr,
                    m,
                    wdot_coef_d,
                    k,
                    &beta,
                    wdot,
                    m);
    CHECK_ROCBLAS_STATUS(stat);

    return stat;
}

//*********************************************************************************************
//*********************************************************************************************
//*********************************************************************************************

//this kernel computes the 
static rocblas_status accum_wdot_kernel(
    int ng,
    int nreact,
    rocblas_handle *handle, 
    double* rr,
    double* wdot_coef_d,
    double* wdot) {
    
    rocblas_status stat = rocblas_status_success;

    rocblas_int m   =  ng;
    rocblas_int n   =  NSP_RED;
    rocblas_int k   =  nreact;
    
    double alpha = 1.0;
    double beta  = 1.0;
    
    //this sets where the scalar values are stored
    stat = rocblas_set_pointer_mode(*handle, rocblas_pointer_mode_host);
    CHECK_ROCBLAS_STATUS(stat);
    
    // Perform the matrix multiplication
    //this is non-blocking
    stat = rocblas_dgemm(
                    *handle,
                    rocblas_operation_none,
                    rocblas_operation_none,
                    m,
                    n,
                    k,
                    &alpha,
                    rr,
                    m,
                    wdot_coef_d,
                    k,
                    &beta,
                    wdot,
                    m);
    CHECK_ROCBLAS_STATUS(stat);

    return stat;
}

//*********************************************************************************************

static __global__ void compute_logC_kernel(
    int ng,
    double *P,
    double *T,
    double *Y,
    double *logC
){
    int idx_l = threadIdx.x;
    int idx_g = blockIdx.x * blockDim.x + idx_l;

    compute_c_no_transpose(
        ng,
        idx_g,
        mw_d,
        Y,
        P,
        T,
        logC
    );
    for (int i=0; i < NSP_RED; i++ ){
        logC[i*ng + idx_g] = log(max(logC[i*ng + idx_g],SMALL));
    }
}

static __global__ void compute_logEG_kernel(
    int ng,
    double *T,
    double *logEG
){
    int idx_l = threadIdx.x;
    int idx_g = blockIdx.x * blockDim.x + idx_l;

    compute_logEG_no_transpose(
        ng,
        idx_g,
        smh_coef_d,
        T_mid_d,
        T,
        logEG
    );
}
//*********************************************************************************************
//*********************************************************************************************

extern "C" void getrates_hip_wrapper_v4(double* P, \
                                        double* Temp, \
                                        int ng, \
                                        double* Ysp,\
                                        double* WDOT_RR,\
                                        double* logEG_d,
                                        double* logC_d) {

    dim3 blocks, threads;
    hipStream_t stream1, stream2, stream3;
    rocblas_handle handle1,handle2;
    rocblas_status stat;
    

    threads = dim3(256,1, 1);
    blocks = dim3(ng/256, 1, 1);
   
    // Launch kernel to compute logC
    hipLaunchKernelGGL(compute_logC_kernel, blocks, threads, 0, 0,
                       ng, P, Temp, Ysp, logC_d);

    // Launch kernel to compute logEG
    hipLaunchKernelGGL(compute_logEG_kernel, blocks, threads, 0, 0,
                       ng, Temp, logEG_d);

    // Synchronize to ensure computations are complete
    hipDeviceSynchronize();    

    // Create rocBLAS handles
    rocblas_create_handle(&handle1);
    rocblas_create_handle(&handle2);

    // Set default stream for both handles
    rocblas_set_stream(handle1, hipStreamDefault);
    rocblas_set_stream(handle2, hipStreamDefault);

    // Calculate equilibrium constant 
    stat = calc_eqk_no_pfac_kernel(ng, NREACT_STD, &handle1, logEG_d, sk_coef_d, logEQK_d);
    CHECK_ROCBLAS_STATUS(stat);
    //wait until equilibrium constants are computed
    hipStreamSynchronize(hipStreamDefault);
    // Calculate sigma_logC for reactants and products
    stat = calc_sigma_logC_kernel(ng, NREACT_STD, &handle1, logC_d, coef_r_d, sigma_logC_r_d);
    CHECK_ROCBLAS_STATUS(stat);
    stat = calc_sigma_logC_kernel(ng, NREACT_STD, &handle2, logC_d, coef_p_d, sigma_logC_p_d);
    CHECK_ROCBLAS_STATUS(stat);
    // wait until sigma_logC_p_d is done
    hipStreamSynchronize(hipStreamDefault);

    threads = dim3(VECLEN, NREACT_PER_BLOCK, 1);
    blocks = dim3(ng / VECLEN, NREACT_STD / NREACT_PER_BLOCK, 1);
    // Calculate net rate of progress
    hipLaunchKernelGGL(calc_net_rate_kernel, 
                        blocks, 
                        threads, 
                        0, 
                        hipStreamDefault, 
                        ng, 
                        Temp, 
                        logEQK_d, 
                        sigma_logC_p_d, 
                        sigma_logC_r_d, 
                        sk_coef_d, 
                        A_d, 
                        B_d, 
                        rr_d);
    //wait until net rate of progress is done
    hipStreamSynchronize(hipStreamDefault);

    // Calculate wdot
    stat = calc_wdot_kernel(ng, NREACT_STD, &handle1, rr_d, wdot_coef_d, WDOT_RR);
    CHECK_ROCBLAS_STATUS(stat);

    // Synchronize stream
    hipStreamSynchronize(hipStreamDefault);

#ifdef USE_THREE_BODY
    // Calculate equilibrium constant 
    stat = calc_eqk_no_pfac_kernel(ng, NREACT_THIRD, &handle1, logEG_d, sk_coef_third_d, logEQK_third_d);
    CHECK_ROCBLAS_STATUS(stat);
    //wait until equilibrium constants are computed
    hipStreamSynchronize(hipStreamDefault);
    // Calculate sigma_logC for reactants and products
    stat = calc_sigma_logC_kernel(ng, NREACT_THIRD, &handle1, logC_d, coef_r_third_d, sigma_logC_r_third_d);
    CHECK_ROCBLAS_STATUS(stat);
    stat = calc_sigma_logC_kernel(ng, NREACT_THIRD, &handle2, logC_d, coef_p_third_d, sigma_logC_p_third_d);
    CHECK_ROCBLAS_STATUS(stat);
    // wait until sigma_logC_p_d is done
    hipStreamSynchronize(hipStreamDefault);

    threads = dim3(VECLEN, NREACT_PER_BLOCK, 1);
    blocks = dim3(ng / VECLEN, NREACT_THIRD / NREACT_PER_BLOCK, 1);
    // Calculate net rate of progress
    hipLaunchKernelGGL(calc_net_rate_kernel_three_body, 
                        blocks, 
                        threads, 
                        0, 
                        hipStreamDefault, 
                        ng, 
                        Temp, 
                        logC_d, 
                        logEQK_third_d, 
                        sigma_logC_p_third_d, 
                        sigma_logC_r_third_d, 
                        sk_coef_third_d, 
                        A_third_d, 
                        B_third_d, 
                        eff_fac_third_d,
                        rr_third_d);
    //wait until net rate of progress is done
    hipStreamSynchronize(hipStreamDefault);

    // Calculate wdot
    stat = accum_wdot_kernel(ng, NREACT_THIRD, &handle1, rr_third_d, wdot_coef_third_d, WDOT_RR);
    CHECK_ROCBLAS_STATUS(stat);

    // accumulate stream
    hipStreamSynchronize(hipStreamDefault);
#endif

#ifdef USE_TROE
    // Calculate equilibrium constant 
    stat = calc_eqk_no_pfac_kernel(ng, NREACT_TROE, &handle1, logEG_d, sk_coef_troe_d, logEQK_troe_d);
    CHECK_ROCBLAS_STATUS(stat);
    //wait until equilibrium constants are computed
    hipStreamSynchronize(hipStreamDefault);
    // Calculate sigma_logC for reactants and products
    stat = calc_sigma_logC_kernel(ng, NREACT_TROE, &handle1, logC_d, coef_r_troe_d, sigma_logC_r_troe_d);
    CHECK_ROCBLAS_STATUS(stat);
    stat = calc_sigma_logC_kernel(ng, NREACT_TROE, &handle2, logC_d, coef_p_troe_d, sigma_logC_p_troe_d);
    CHECK_ROCBLAS_STATUS(stat);
    // wait until sigma_logC_p_d is done
    hipStreamSynchronize(hipStreamDefault);

    threads = dim3(VECLEN, NREACT_PER_BLOCK, 1);
    blocks = dim3(ng / VECLEN, NREACT_TROE / NREACT_PER_BLOCK, 1);
    // Calculate net rate of progress
    hipLaunchKernelGGL(calc_net_rate_kernel_troe, 
                        blocks, 
                        threads, 
                        0, 
                        hipStreamDefault, 
                        ng, 
                        Temp, 
                        logC_d,
                        logEQK_troe_d, 
                        sigma_logC_p_troe_d, 
                        sigma_logC_r_troe_d, 
                        sk_coef_troe_d, 
                        A_0_troe_d, 
                        B_0_troe_d, 
                        A_inf_troe_d, 
                        B_inf_troe_d,
                        eff_fac_troe_d,
                        fcent_coef_troe_d ,
                        rr_troe_d);
    //wait until net rate of progress is done
    hipStreamSynchronize(hipStreamDefault);

    // accumulate wdot
    stat = accum_wdot_kernel(ng, NREACT_TROE, &handle1, rr_troe_d, wdot_coef_troe_d, WDOT_RR);
    CHECK_ROCBLAS_STATUS(stat);

    // Synchronize stream
    hipStreamSynchronize(hipStreamDefault);
#endif

    // Destroy rocBLAS handles
    rocblas_destroy_handle(handle1);
    rocblas_destroy_handle(handle2);

    // Destroy streams
    // hipStreamDestroy(stream1);
    // hipStreamDestroy(stream2);
    // hipStreamDestroy(stream3);
}
