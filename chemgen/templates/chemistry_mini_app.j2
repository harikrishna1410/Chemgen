!========================================================================================
!#define NO_GETRATES
program test_chemgen
    use chemgen_m
    implicit none
    integer io          !output io unit
    integer L,m
    integer it,i,nu
    real(kind=8) max_err_mu,max_err_lam,max_err_ds
    integer,parameter :: ngpu = {{ ngpu }}
    integer,parameter :: ncpu = {{ ncpu }}       ! ngpu must divide evenly into ncpu
    integer,parameter :: ng = {{ ng }}      ! size of the problem on one CPU core or thread
    integer,parameter :: ngn = ng*ncpu   ! size of the whole problem on one node
    integer,parameter :: ngg = ngn/ngpu  ! size of the problem on one gpu
    integer,parameter :: nt = {{ nt }}
    integer, parameter :: MAXVL = 32
    real(kind=8),dimension(:),allocatable :: T,P
    real(kind=8),dimension(:,:),allocatable :: Ysp
    real(kind=8),allocatable,dimension(:,:) :: wdot_cpu,wdot_gpu
    real(kind=8) :: start_time_hip, end_time_hip
    real(kind=8) :: cpu_cost_time(2),gpu_cost_time(2)
    {% if input_MW %}
    real(kind=8),dimension(:),allocatable :: MW
    {% endif %}

!!!allocate and rand init variables
    allocate(P(ngg))
    allocate(T(ngg))
    allocate(Ysp(ngg,{{ n_species_red }}))
    allocate(wdot_cpu(ngg,{{ n_species_red }}))
    allocate(wdot_gpu(ngg,{{ n_species_red }}))
    {% if input_MW %}
    allocate(MW({{ n_species_red }}))
    {% endif %}

    !!init vars
    call random_number(T)
    call random_number(Ysp)
    !!!rescale yspecies to 0,1/nsc so that max of sum can never be >1
    ysp = ysp/({{ n_species_red-1 }})
    ysp(:,{{ n_species_red }}) = 1.0 - SUM(ysp(:,1:{{ n_species_red-1 }}),dim=2)
    !!rescale it between 300 k to 2000 k
    T = 300 + 1700*T
    p = 1013250 !!1 atm in dynes/cm2
    wdot_cpu = 0.0
    wdot_gpu = 0.0
    {% if input_MW %}
    MW = 1.0
    {% endif %}

!$omp target enter data map(to:T,P,Ysp,wdot_gpu)

    !!init chemgen_m
    call init_chemgen(1,ngg{% if input_MW %},MW{% endif %})
!!correcteness check
!$omp target enter data map(to:T,P,Ysp,wdot_gpu)
    do m=1,ng
        call getrates(p(m),t(m),  &
                      ysp(m,:),{% if input_MW %} MW, {% endif %}wdot_cpu(m,:))
    enddo
    
    call getrates_gpu(P,T, ngg, Ysp, {% if input_MW %}MW, {% endif %}wdot_gpu)
!$omp target update from(wdot_gpu)
 
    write(*,*) "max error mu:",maxval(abs(wdot_cpu(1:ng,:)-wdot_gpu(1:ng,:)))/maxval(abs(wdot_cpu(1:ng,:))),&
                maxval(abs(wdot_cpu(1:ng,:))),minval(abs(wdot_cpu(1:ng,:)))
    do it = 1,{{ n_species_red }}
        write(*,*) "cpu,gpu", wdot_cpu(1,it),wdot_gpu(1,it)
    enddo

{% if time_cpu %}
!!speed test
    call cpu_time(cpu_cost_time(2))
!***************************************************************************************
!****************************CPU LOOP start*********************************************
!***************************************************************************************
    do it=1,nt
    do m = 1, ng, MAXVL
        nu = min(MAXVL, ng-m+1)
        call getrates_i(P(m:m+nu-1), T(m:m+nu-1), nu, Ysp(m:m+nu-1,:), {% if input_MW %}MW, {% endif %}wdot_cpu(m:m+nu-1,:))
    enddo
    enddo
!***************************************************************************************
!****************************CPU LOOP end***********************************************
!***************************************************************************************
    call cpu_time(cpu_cost_time(1))
{% endif %}
    call cpu_time(gpu_cost_time(2))
!***************************************************************************************
!****************************GPU LOOP start*********************************************
!***************************************************************************************
    do it=1,nt
        call getrates_gpu(P,T, ngg, Ysp, {% if input_MW %}MW, {% endif %}wdot_gpu)
    enddo
!***************************************************************************************
!****************************GPU LOOP end***********************************************
!***************************************************************************************
!$omp target exit data map(delete:T,P,Ysp,wdot_gpu)
    call cpu_time(gpu_cost_time(1))

    call init_chemgen(0,ngg{% if input_MW %},MW{% endif %})
    deallocate(P,T,Ysp,wdot_cpu,wdot_gpu{% if input_MW %},MW{% endif %})
{% if time_cpu %}
    write(*,*) "CPU Cost (sec):",(cpu_cost_time(1) - cpu_cost_time(2))
{% endif %}
    write(*,*) "GPU Cost (sec):",(gpu_cost_time(1) - gpu_cost_time(2))

end program test_chemgen
